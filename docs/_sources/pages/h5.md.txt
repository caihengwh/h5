.. sectnum::
   :start: 1

##################################
使用 HTML5 和 CSS3 设计个人页面
##################################


学习H5之前，需要了解Web基础开发，以下内容是Web开发的基本概念。

客户端和服务器通信
====================

Web应用程序基本上包括两台相互通信的计算机，它们被称为服务器和客户端。

* 客户端计算机可能是各种各样的设备，从智能手表到手机，从平板电脑到电脑。用户在客户端上使用Web浏览器与服务器（Web应用程序部署在其上面）进行交互。客户端（用户的计算机）与服务器进行通信，发送HTTP请求和接收结果。
* 服务器位于云端或数据中心，它会监听来自客户端发送来的HTTP请求，并返回结果。服务器还可以其他访问Web应用程序使用的数据，如后端数据库。

目前有两种类型的Web应用程序：运行在服务器端的Web应用程序和运行在客户端的Web应用程序（SPA）。

运行在服务器端的Web应用程序
******************************
运行在服务器端Web应用程序是指：应用程序的计算和运算逻辑在服务器上完成，客户端基本不参与计算，仅接收服务器返回的全部数据。当用户通过客户端向服务器发送一个请求，服务器执行一些操作并返回一个全新的HTML页面，作为响应显示在客户端上。服务器针对客户端的每次请求重新生成该Web页面的全部数据并将其发送回客户端的Web浏览器中，如图2-1所示。

.. image:: images/Figure2-1.png
    :width: 400px
    :alt: 运行在服务器端的Web应用程序

图2-1 运行在服务器端的Web应用程序

运行在客户端的Web应用程序
******************************
客户端的Web应用程序（也称为单页面应用程序，简称SPA）。许多Web应用程序仍然在服务器上执行，但是一些代码也同时在客户端（Web浏览器）上执行，以避免频繁地重新生成页面。

当用户在客户端中执行一个操作时，它向服务器发送一个请求，服务器执行一些操作并返回结果信息(通常是JSON格式的数据，而不是一个全新的HTML页面)。客户端代码侦听来自服务器的结果信息，并自行决定在不生成新页面的情况下如何呈现给客户。

客户端Web应用程序往往更具交互性和灵活性，因为它们可以更快地响应用户交互，它们不必等待发回的全部数据。只需要服务器返回一个局部的结果，而不是整个HTML页面。此体系结构如图2-2所示。

.. image:: images/Figure2-2.png
    :width: 400px
    :alt: 运行在客户端的Web应用程序

图2-2 运行在客户端的Web应用程序

服务器端应该承担主要工作，业务逻辑及数据应该保留在服务器端，并在需要时供客户端调用或检索。
客户端（浏览器）可以使用更先进的异步技术来避免整个页面刷新，客户端仅胜任与用户的交互工作。



什么是HTML
====================
HTML即超文本标记语言（HyperText Markup Language，简称：HTML），它是构建Web的基石，是一种用于创建Web的标准标记语言。HTML是一种基础技术，常与CSS、JavaScript一起被用于设计Web、Web应用程序以及移动应用程序的用户界面，这3者的区别是：

#. HTML用来创建和表示网页的内容及其结构；
#. CSS用于描述页面的样式和布局；
#. Javascript用来在页面中创建交互式功能。

Web浏览器可以读取HTML文件，并将其渲染成可视化网页。HTML描述了一个Web页面的结构语义随着线索的呈现，使之成为一种标记语言而非编程语言。

HTML允许嵌入图像和对象，并且可以用于创建交互式表单，它被用来结构化信息，如标题、段落和列表等等，也可用来在一定程度上描述文档的外观和语义。HTML的语言形式为尖括号包围的HTML元素（如<html>），浏览器使用HTML标签和脚本来诠释网页内容。

Angular中使用模板显示页面内容，而模板使用的就是HTML语言，掌握基础的HTML知识，有助于我们加快学习Angular技术。

什么是DOM文档
====================
DOM即文档对象模型（Document Object Model，简称：DOM），它是HTML页面和XML文档的编程接口。DOM文档定义了访问和操作HTML页面的标准方法。

DOM文档提供了对HTML页面的结构化的表述，并定义了一种方式可以从程序中对该结构进行访问，从而改变HTML页面的结构、样式和内容。DOM文档将HTML页面解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将HTML页面和脚本或程序语言连接起来。

一个HTML页面对应一个DOM文档。这个文档可以在浏览器窗口或作为HTML源码显示出来。DOM文档提供了对同一份HTML页面的另一种表现，存储和操作的方式。

HTML特性与DOM属性
====================
当浏览器解析完HTML后，生成的DOM是一个继承自Object的常规JavaScript对象，因此我们可以像操作任何JavaScript对象那样来操作DOM对象。

* Attribute属于HTML，可以是任意属性，赋值及取值使用setAttribute()和getAttribute()方法。
* Property属于DOM，赋值或取值使用“.”操作符。

.. admonition:: 提醒

    HTML中的attribute和DOM中的property，一般情况下都被称呼为“属性”。本书为了区分起见，我们分别称呼他们为：HTML特性（attribute）与DOM属性（property）。


HTML特性与DOM属性的关系
******************************
当我们为HTML元素设置特性，例如：

 .. code-block:: HTML

    <input id="name" value="Murphy"/>

上述代码书写了一个input标签，并给他定义了2个特性 (id和value)。当浏览器解析这段代码的时候，会把HTML源码解析为DOM对象，确切的说是解析为 HTMLInputElement对象。在DOM对象中，用户可以通过该对象找到对应的id和value属性。简单的说，就是当浏览器解析HTML网页时，将HTML特性映射为了DOM属性。


HTML特性与DOM属性的区别
******************************
HTML特性与DOM属性的区别主要有：

* 并非所有的HTML特性都可以生成DOM属性，如HTML中的colspan特性，DOM上没有对应的属性。HTML也可以添加非标准的特性，例如：

 .. code-block:: HTML

    <input id="name" value="Murphy" local="wuhan" />

*  当HTML特性特性映射为DOM属性时，只映射标准特性，访问非标准特性将得到“undefined”值。

 .. code-block:: javascript

    const el = document.getElementById('local') // 试图通过getElementById()方法获得DOM对象
    el.local === undefined // 由于local特性是非标准特性，因此无法映射为DOM属性

*  非标准HTML特性并不会自动映射为DOM属性。可以使用“data-”开头的HTML特性时，会映射到DOM的dataset属性里。

 .. code-block:: javascript

    el.setAttribute('data-myName', 'Murphy'); // 将myName属性的值设置为Murphy
    el.dataset.myName === 'Murphy' // 比较dataset的myName属性值是否等于Murphy

*  HTML特性是不区分大小写的，而DOM属性是区分大小写的，因此以下代码的效果是一样的：

 .. code-block:: javascript

    el.getAttribute('id') // 小写id
    el.getAttribute('ID') // 大写ID
    el.getAttribute('iD') // 小写i大写D

*  当修改HTML特性的值时，DOM属性的值也会更新；但是修改DOM属性的值后，HTML特性的值却还是原值。

 .. code-block:: javascript

    el.setAttribute('value', 'Jack');       // HTML特性的值
    el.value === 'Jack'                     // DOM属性的值也更新了  

    el.value = 'newValue';                  // 修改DOM属性的值 
    el.getAttribute('value')) === 'Murphy'  // HTML特性的值没有更新


掌握CSS的基础知识
====================
CSS即层叠样式表(Cascading Style CSS)是一种用来表现HTML文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。
CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。


在CSS中，通常把HTML中的标签元素大体分为3种不同的类型：块状元素、行内元素和内联块状元素。理解他们的区别有助于CSS的学习。


如何应用样式属性
*******************************

1. 直接在DOM标签上使用style属性 (不推荐)；
2. 在页面的header区域使用\<style>标签，再在其内部定义样式 (仅推荐用于简单的页面)；
3. 引入外部的CSS文件。

.. code-block:: html

    <link rel="stylesheet" href="https://path-to-the-css-file.css">

块状元素
******************************
HTML中的块状元素主要有::

    <div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote>、<form>

块状元素的特点有：

* 每个块级元素都从新的一行开始，并且其后的元素也另起一行；
* 元素的高度、宽度、行高以及顶和底边距都可设置；
* 元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度；
* 行内元素转换成块状元素：

 .. code-block:: CSS

    /* 使a行内元素具有块状元素特点 */
    a {
        display:block;
    }

行内元素
******************************
HTML中的行内元素主要有::

    <a>、<span>、<br>、<i>、<em>、<strong>、<label>、<q>、<var>、<cite>、<code>

行内元素的特点有：

* 和其他元素都在一行上；
* 元素的高度、宽度及顶部和底部边距不可设置；
* 元素的宽度就是它包含的文字或图片的宽度，不可改变；
* 块状元素转换为行内元素

 .. code-block:: CSS

    /* 块状元素div转换为行内元素 */
    div {
        display:inline;
        }


行内块状元素
******************************
HTML中的行内块状元素主要有::

    <img>、<input>

行内块状元素的特点有：

* 就是同时具备行内元素、块状元素的特点；
* 和其他元素都在一行上；
* 元素的高度、宽度、行高以及顶和底边距都可设置。


CSS属性
******************************
CSS中有很多属性，每个属性有各自的含义。例如：color是文本的颜色属性，而text-indent则规定了段落的缩进。
学习CSS属性时，请注意下面的几个方面：

* 属性的合法属性值。如段落缩进属性text-indent只接受一个表示长度的值，而背景图案background中的image属性可以接受的值有2种，一种是表示图片位置的链接值，另一种用none表示不用背景图案。
* 属性的默认值。
* 属性所适用的HTML元素。正如HTML元素有多种，CSS属性只适用于特定的类别元素，比如white-space属性就只适用于块级元素。
* 属性的值是否被下一级继承。
* 如果该属性能取百分值，那么该百分值所相对的标准是什么。如margin属性可以取百分值，它是相对于margin所存元素的容器的宽度。

CSS度量单位
******************************
CSS度量单位主要分为两种；绝对单位和相对单位：

* 绝对单位，不会因为其他元素的尺寸变化而变化。
* 相对单位 ，没有一个固定的度量值，而是由其他元素尺寸来决定的相对值。

常见的度量单位有：

* px（像素），指的是屏幕上显示的最小单元；
* em单位是一个相对度量单位，它的计算方式是当前元素的font-size的px值乘以em前面的数字；
* rem单位和em单位很类似，区别是他是相对于HTML根元素的font-size值去计算的；
* vw和vh，视窗（viewpoint）的宽度和高度，1vw=视窗宽度的1%，1vh=视窗高度的1%；
* %，百分比单位；


CSS选择器
******************************
CSS选择器用于选择需要添加样式的HTML元素。使用CSS选择器的原则是：

#. 准确的选到要控制的标签；
#. 使用最合理优先级的选择器；
#. HTML和CSS代码尽量简洁美观。

CSS选择器的种类很多，按照选择器的效率从高到低的排序如下：

#. id选择器（#id）
#. 类选择器（.classname）
#. 标签选择器（div，h1，p）
#. 相邻选择器（h1+p）
#. 子选择器（ul > li）
#. 后代选择器（li a）
#. 通配符选择器（*）
#. 属性选择器（a[rel="external"]）
#. 伪类选择器（a:hover，li:nth-child）


使用CSS设置页面样式
==================================


空间(边距)管理和盒子模型
*******************************
盒子模型 (Box Model): 任意一个块级元素，均由content(内容)、padding、background(包括背景颜色和图片)、border(边框)、margin五个部分组成。如下图所示:


.. image:: ./images/box-model.jpg
   :width: 440px


其中，常用的调节边距的属性为如下两个

1. margin: 元素外部边距，其在CSS中定义的方法有以下几种:

    - margin: 10px; (将四周全部外部边距均设置为10px)
    - margin: 5px 15px 10px 20px; (分别设置四个方向的外边距像素值，顺序为顺时针方向: 上, 右, 下, 左)
    - margin-top: 10px; (只设置顶部外边距)
    - 此外还有margin-bottom, margin-left和margin-right

2. padding: 元素内部边距

    - padding: 10px (将四周全部内部边距均设置为10px)
    - padding: 5px 15px 10px 20px (分别设置四个方向的内边距像素值，顺序为顺时针方向: 上, 右, 下, 左)
    - padding-top: 10px; (只设置顶部内边距)
    - padding-bottom, padding-left和padding-right


了解背景设置属性
*******************************

1. background-image: 该属性可指定一张图片作为元素的背景
2. background-size: 该属性指定背景图片的尺寸，可使用`auto`或者具体像素值，例如:

.. code-block:: html

    #example1 {
      background: url(mountain.jpg); // 可使用绝对或相对路径
      background-repeat: no-repeat;
      background-size: auto;
    }
    
    #example2 {
      background: url(mountain.jpg); // 可使用绝对或相对路径
      background-repeat: no-repeat;
      background-size: 300px 100px;
    }



3. background-attachment: 该属性用于指定背景图片是否随页面滚动，如指定为`fixed`则固定在页面中不滚动。默认值为`scroll`。

.. code-block:: html

    body {
      background-image: url("img_tree.gif"); // 可使用绝对或相对路径
      background-repeat: no-repeat;
      background-attachment: fixed;
    }

设置页面元素的字体
*******************************

在CSS中使用font-family来为元素设置显示字体集合(字族)，在font-family中通常指定多个字体，用于不同系统之间的兼容性支持。如果浏览器在该系统中无法使用font-family中指定的第一个字体，它会依次尝试使用下一个。

如果font-family中使用的字体名称为多个单词，该字体必须用双引号引用。

实例:

.. code-block:: html

    body {
      font-family: "Times New Roman", Times, serif;
    }


了解元素框的显示类型(display)
*******************************

display属性规定了元素应该生成的框的类型，常用的display值有

* block: 此元素将被显示为块级元素，前后会带有换行符。div等块级元素默认为block类型。
* inline: 此元素会被显示成内联元素，元素前后没有换行符。p、span等显示文本的元素默认为inline类型。

CSS3中display类型新增flex模型:

flex模型规定了弹性元素如何伸长或缩短以适应flex容器中的可用空间。使用flex模型首先需要创建一个flex container。

html代码:

.. code-block:: html

    <div class="flex-container">
      <div>1</div>
      <div>2</div>
      <div>3</div>
    </div>

CSS中，为该container添加样式:

.. code-block:: html

    .flex-container {
      display: flex;
      background-color: DodgerBlue;
    }
    
    .flex-container > div {
      width: 100px;
      margin: 10px;
      text-align: center;
      line-height: 75px;
      font-size: 30px;
    }

container样式中可以使用的属性有:

* flex-direction: 规定了container内部元素的排列方向，常用值为`row`(水平排列)和`column`(垂直排列)。
* flex-wrap: 指定内部元素是否换行，可用值有`wrap`和`nowrap`。
* flex-flow: 为上述两个属性的快捷设置方式，可在flex-flow中同时指定direction和wrap。
* justify-content: 指定内部元素的水平对齐方式，可用值为: 
  - flex-start
  - flex-end
  - center
  - space-around
  - space-between
  - space-evenly
* align-items: 指定内部元素的垂直对齐方式，常用值为 `flex-start`, `flex-end`, `center`和`baseline`。其中`baseline`方式是以各内部元素的文字底部做为参考水平线来对齐。
* align-content: 指定container内部整体内容的对齐方式，常用值与align-items基本一致。

container内部的flex item可用属性为:

* order: 指定元素的顺序。
* flex-grow: 指定元素可被拉伸的相对比例值，默认值为1。
* flex-shrink: 指定元素可被压缩的相对比例值，如指定为0则表明该元素不可被压缩。
* flex-basis: 指定元素初始宽度值。
* flex: 此属性为flex-grow, flex-shrink和flex-basis属性的快捷设置方式。如`flex: 0 0 200px`，表明该元素不可拉伸，不可压缩，且初始宽度为200像素。
* align-self: 指定该选定元素在container内部的垂直排列方式，可覆盖container的align-items属性。

实战CSS布局
====================
在实际项目中，WEB页面元素的布局非常重要，大到页面的整体风格，小到一个文本框的对齐，这些都离不开CSS的布局，下面分别介绍2种实际工作中常见的布局应用。

[示例 css-ex100] 元素居中对齐
******************************

1. 新建index.html文件，并将其更改为以下内容：

 .. code-block:: HTML
        
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
            .center {
                margin: auto; /* div外的左右空间对称，也就是居中对齐 */
                width: 50%; /* div宽度占屏幕框的50% */
                border: 3px solid green; /* div边框为3像素框的绿色实线条 */
                padding: 10px; /* div内空间左右分别留10像素空白 */
            }

            .china {
                text-align: center; /* div内文本居中对齐 */
                background-color: yellowgreen; /* 定义div的背景色 */
            }
        </style>
    </head>

    <body>
        <div class="center">
            <div class="china">
                学习HTML+CSS
            </div>
        </div>
    </body>

    </html>

2. 用浏览器打开index.html文件，观察页面，显示效果如图2-3所示。

  .. image:: images/Figure2-3.png
   :width: 500px

  图2-3 元素居中对齐


在上面的示例css-ex100中，完成了以下内容：

#. HTML中的body里面定义了2个嵌套的div元素，分别引用了2个不同的样式：center和china；
#. center样式里面最最重要的就是margin，margin的4个值分别对应：上右下左。也就是说 ``margin: auto;`` 其实相当于 ``margin: auto auto auto auto;`` ，``margin: 0 auto;`` 相当于 ``margin: 0 auto 0 auto;`` 。



[示例 css-ex200] 元素居中对齐之Flex
**************************************

1. 新建index.html文件，并将其更改为以下内容：

 .. code-block:: HTML
        
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
            .center {
                display: flex; /* 定义Flex容器 */
                justify-content: center; /* 水平居中对齐 */
                align-items: center; /* 垂直居中对齐 */
                height: 100px;
            }

            .china {
                border: 1px solid red;
                text-align: center; /* 文字水平居中对齐 */
                background-color: yellowgreen;
                width: 300px;
            }
        </style>
    </head>

    <body>
        <div class="center">
            <div class="china">
                学习HTML+CSS
            </div>
        </div>
    </body>

    </html>

2. 用浏览器打开index.html文件，观察页面，显示效果如图2-4所示。

  .. image:: images/Figure2-4.png
   :width: 500px

  图2-4 元素居中对齐


在上面的示例css-ex200中，完成了以下内容：

#. HTML中的body里面定义了2个嵌套的div元素，分别引用了2个不同的样式：center和china；
#. 样式center里面使用了Flex弹性容器布局（display: flex;），在容器上面定义了水平和垂直居中的样式来限定子元素的布局。


[示例 css-ex300] 元素自适应屏幕及自动换行
************************************************************

1. 新建index.html文件，并将其更改为以下内容：

 .. code-block:: HTML
            
    <!DOCTYPE html>
    <html>

    <head>
        <style>
            .flex-container {
                display: flex; /* 生成一个块状元素 */
                justify-content: center; /* 水平居中对齐 */
                /* background-color: tomato; */
            }

            .flex-container>div {
                background-color: tomato;
                width: 100px;
                margin: 10px;
                text-align: center;
                color: white;
                font-weight: bold;
                font-size: 30px;
            }

            .flex-container-wrap {
                display: inline-flex; /* 生成一个弹性的行内容器 */
                flex-flow: row wrap; /* 按行排列，超过屏宽后，自动换行 */
                justify-content: center; /* 水平居中对齐 */
                align-items: center; /* 垂直居中对齐 */
            }

            .flex-container-wrap>div {
                background-color: #f1f1f1;
                width: 100px;
                margin: 10px;
                text-align: center;
                font-weight: bold;
                font-size: 30px;
            }
        </style>
    </head>

    <body>
        <div class="flex-container">
            <div>1</div><div>2</div><div>3</div><div>4</div><div>5</div>
            <div>6</div><div>7</div><div>8</div><div>9</div><div>10</div>
        </div>

        <div class="flex-container-wrap">
            <div>1</div><div>2</div><div>3</div><div>4</div><div>5</div>
            <div>6</div><div>7</div><div>8</div><div>9</div><div>10</div>
        </div>
    </body>

    </html>

2. 用浏览器打开index.html文件，观察页面，显示效果如图2-5所示。

  .. image:: images/Figure2-5.png
   :width: 500px

  图2-5 元素自适应屏幕及自动换行


在上面的示例css-ex200中，完成了以下内容：

#. flex-container样式里面选择 ``display: flex;`` ，表示把整行生成一个块状元素，该元素随着屏幕的拉伸自动适应缩放比例，不换行；
#. flex-container-wrap样式里面选择 ``display: inline-flex;`` ，表示把整行生成一个弹性的行内容器，该容器内的元素随着屏幕的拉伸自动换行显示。



使用HTML5的语义化标签
==========================================================
在HTML 5出来之前，我们用div来表示页面章节，但是这些div都没有实际意义。（即使我们用css样式的id和class形容这块内容的意义）。这些标签只是我们提供给浏览器的指令，只是定义一个网页的某些部分。但现在，那些之前没“意义”的标签因为因为html5的出现消失了，这就是我们平时说的“语义”。

所谓HTML语义化标签，是指有具体自然语言含义的标签。使用语义化标签的好处主要有以下几点:

1. HTML结构清晰
2. 代码可读性较好
3. 为无障碍阅读提供良好支持
4. 搜索引擎优化(SEO)

相对于语义化标签，常见的非语义化标签主要有`div`或者`span`等等，这些标签并没有太多实际语义。

常用的语义化标签比如:

.. code-block:: html

	<img src="path-to-image.jpg">


或者还诸如button, form, input等等。

HTML5中新增的常用语义化标签如图2-6所示。

  .. image:: images/Figure2-6.jpg
   :width: 500px

  图2-6 常用语义化标签

header语义化标签
**********************
header标签定义一个内容块，代表整个网页或"section"的页眉，通常包括<h1>~<h6>、<hgroup>等元素，作为整个页面或一个内容块的标题，也可以包含一块目录区域nav，一个搜索框，或相关logo。整个页面中没有数量限制。

实例:

.. code-block:: html

    <header>
      <hgroup>
        <h1>下标题</h1>
        <h2>副标题</h2>
      </hgroup>
    </header>


footer语义化标签
**********************
footer标签定义一个区域，作为整个页面或"section"的页脚（底部），通常包含整个页面或该区域的基本信息，如: 作者、相关文档链接、版权信息、索引、标签、协议等。整个页面中没有数量限制。

实例:

.. code-block:: html

    <footer>
      相关文档链接、版权信息
    </footer>


nav语义化标签
**********************
nav标签定义页面的导航链接部分，主要用于页面的主要导航部分。

实例: 

.. code-block:: html

    <nav><!-- 页面的主要导航部分 -->
      <ul>
        <li>第一个链接</li>
        <li>第二个链接</li>
        <li>第三个链接</li>
      </ul>
    </nav>


section语义化标签
**********************
section标签定义了"节"和"段"，"段"可以是一篇文章里相关主题的分段，是文章的组成部分。如果可以用<article>、<header>、<aside>，就不要用<section>，<section>不是一般意义的容器，如果想作为样式展开就用<div>。

* article: <article>很容易与<div>、<section>混淆，它定义了在文档、页面和网站中自成一体的内容，便于开发者独立开发。例如: 一篇博客文章、用户评论、论坛帖子等。<article>中通常有自己的标题（在<header>中），也有自己的<footer>。

.. code-block:: html

    <article>
      <header>
         <h1>一篇文章</h1>
         <p><time datetime="2017-01-01">2017-01-08</time><p>
      </header>
      <p>文章正文内容。。。。</p>
      <footer>
        <small>版权: HTML5所有。作者: xxx</small>
      </footer>
    </article>


aside语义化标签
**********************
aside标签定义附加信息，如果在<article>内部，则作为主要内容的附加信息，包括: 标签、相关资料、名词解释等。如果在<article>外部，则作为整个页面的附加信息，包括: 侧边栏、广告、其它导航等。


参考
============================
#. https://www.z01.com/help/web/3234.shtml
#. https://www.w3schools.com/css/default.asp



